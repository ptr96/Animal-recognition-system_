import numpy as np
import tensorflow as tf

from config import IMG_HEIGHT, IMG_WIDTH
from src.utils.get_data_class_names import get_data_class_names
from src.utils.get_img_from_base64 import get_img_from_base64

base64_string_shark = ''


print(tf.__version__)

def get_img(path):
     img = tf.keras.utils.load_img(
      path, target_size=(IMG_HEIGHT, IMG_WIDTH)
    )
     return img

def predict_image_class():
  model = tf.keras.models.load_model('models/model.keras')
  class_names = get_data_class_names()

  # img = get_img_from_base64(base64_string_shark)
  img = get_img('data/test_images/tiger2.jpeg')
  
  img_array = tf.keras.utils.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0) # Create a batch

  predictions = model.predict(img_array)
  score = tf.nn.softmax(predictions[0])

  print(
      "This image most likely belongs to {} with a {:.2f} percent confidence."
      .format(class_names[np.argmax(score)], 100 * np.max(score))
)
  
predict_image_class()